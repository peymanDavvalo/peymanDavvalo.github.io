
Linear 1D Advection Equation
****************************

Introduction
==================== 

1D linear advection equation (so called wave equation) is one of the 
simplest equations in mathematics. The equation is described as:

.. math:: \frac{\partial u}{\partial t} + c \frac{\partial u}{\partial x} = 0
   :label: adv_1d

where :math:`u(x,t), x \in \mathbb{R}` is a scalar (wave), advected by a nonezero constant :math:`c` during time :math:`t`. The sign of :math:`c`
characterise the direction of wave propagation. If :math:`c>0`, the wave propagates in the positive direction of :math:`x`-axis. On the other hand if :math:`c<0` then 
the wave propagates to the negative direction of `x`-axis. The mangitude of :math:`c` tells us how fast the wave propagates.
The exact solution of this equation is given by its initial value. Assuming that the initial value for equation
:eq:`adv_1d` is given as :math:`u_0(x) = u(x,0)`, the exact solution of equation :eq:`adv_1d` is:

.. math:: u(x,t) = u_{0}(x-ct)
   :label: ex_adv_1d


Numerical Techniques
====================   
   
Although this equation is simple to solve, it can be very useful for learning numerical techniques. We start by introducing the 
numerical methods.    

Forward-Time Central-Space (FTCS) Method
----------------------------------------

FTCS is based on central spatial difference scheme and the temporal forward Euler method.  Assume that :math:`t` and :math:`x` are 
descritized uniformly as:

.. math::
   :label: ti
 
   t_{n}= t_{0}+ \Delta t   \qquad n=0,...,T 
   
   x_{i}= x_{0}+ \Delta x   \qquad i=0,...,N 
   
Let us assume that :math:`u_{i}^{n}:=u(x_i,t_n)`. Then using applying central spatial difference and the temporal forward Euler methods to equation :eq:`adv_1d`, we have:

.. math:: \frac{u_{i}^{n+1}-u_{i}^{n}}{\Delta t} + \frac{u_{i-1}^{n}-u_{i+1}^{n}}{2 \Delta x}  = 0
   :label: adv_1d_dis1

If we rearrange equation :eq:`adv_1d_dis1` we finally have:

.. math:: u_{i}^{n+1}=u_{i}^{n}+ \frac{ \Delta t}{2 \Delta x} \Big(u_{i-1}^{n}-u_{i+1}^{n}\Big)   
   :label: adv_1d_dis

Stability And Accuracy
^^^^^^^^^^^^^^^^^^^^^^   
 

Practically this method is not usefull since using von Neumann Stability Analysis, FTCS method is unconditionally unstable.


Upwind Methods
--------------

Upwind methods refers to those methods that the spatial differences are skewed in the flow direction. The simplest upwind method is the discribed by
backward (:math:`c > 0`) or forward (:math:`c < 0`) spatial difference and the temporal forward Euler methods. As it is mentioned, the choice between the two spatial methods are dictated by the
sign of :math:`c`, meaning the flow direction. Using the descritization methods described above we get:
 
.. math:: \frac{u_{i}^{n+1}-u_{i}^{n}}{\Delta t} + \gamma_{min} \Big(\frac{u_{i+1}^{n}-u_{i}^{n}}{ \Delta x} \Big)+ \gamma_{max} \Big(\frac{u_{i}^{n}-u_{i-1}^{n}}{ \Delta x} \Big) = 0
   :label: adv_1d_upwind1

where :math:`\gamma_{min}:=min(a,0)` and :math:`\gamma_{max}:=max(a,0)`. Rearranging equation :eq:`adv_1d_upwind1` we have:

.. math:: u_{i}^{n+1}= \alpha_{max} u_{i-1}^{n}+(1+\alpha_{min}-\alpha_{max})u_{i}^{n} -\alpha_{min}u_{i+1}^{n}
   :label: adv_1d_upwind
   
where :math:`\alpha_{min}:=\frac{\gamma_{min} \Delta t}{\Delta x}` and :math:`\alpha_{max}:=\frac{\gamma_{max} \Delta t}{\Delta x}`. Considering the solution is periodic, we can rewrite equation  :eq:`adv_1d_upwind` 
in its matrix form:

.. math:: \mathbf{U}^{n+1}= \mathbf{A}^{n+1}\mathbf{U}^{n}
   :label: mat_eq

where :math:`\mathbf{U}^{n+1}=[u_{0}^{n+1},u_{1}^{n+1},...,u_{N-1}^{n+1},u_{N}^{n+1}]^{T}` and :math:`\mathbf{U}^{n}=[u_{0}^{n},u_{1}^{n},...,u_{N-1}^{n},u_{N}^{n}]^{T}` and
matrix  :math:`\mathbf{A}` for equation :eq:`adv_1d_upwind` is:

.. math::
   :label: matrixA
   
    \small\mathbf{A}=\small\begin{bmatrix}
    (1+\alpha_{min}-\alpha_{max}) & -\alpha_{min} & 0 & 0 & 0& ... & \alpha_{max} \\
    \alpha_{max} & (1+\alpha_{min}-\alpha_{max}) & -\alpha_{min}& 0 & 0 &... & 0 \\
    0 & \alpha_{max} & (1+\alpha_{min}-\alpha_{max}) & -\alpha_{min}& 0 &... & 0 \\
     \vdots & \vdots & \ddots & \ddots &  \ddots & \vdots & \vdots \\
    0 &0 &... & \alpha_{max} & (1+\alpha_{min}-\alpha_{max}) &  -\alpha_{min} & 0 \\
    0 &0 &... & 0 & \alpha_{max} & (1+\alpha_{min}-\alpha_{max}) &  -\alpha_{min}  \\
    -\alpha_{min} &0 &... & 0 & 0&  \alpha_{max} & (1+\alpha_{min}-\alpha_{max})  \\
    \end{bmatrix}_{(N+1)\times(N+1)}

Stability And Accuracy
^^^^^^^^^^^^^^^^^^^^^^   

The above upwind method is first order accurate in both space. Using von Neumann Stability Analysis, this method is conditionally stable. The condition is:


.. math:: CFL= |\frac{c \Delta t}{\Delta x}| \le 1
   :label: cfl_cond


Python Code
^^^^^^^^^^^  

Here is a python code for modeling the 1D linear advection equation using upwind method described above. 

.. literalinclude:: python_codes/LA1D.py
   :language: python


.. image:: images/LA1D_Python.png
   :width: 500px
   :height: 400px
   :alt: alternate text
   :align: center	


For the explanaition of the code, please take a look at the youtube vidoes.


Matlab Code
^^^^^^^^^^^  
Here is a Matlab code for modeling the 1D linear advection equation using upwind method described above. First we define a class called LinearAdvection1D:


.. literalinclude:: matlab_codes/LinearAdvection1D.m
   :language: matlab


For the main code we use LinearAdvection1D class in the folloing m file.    

.. literalinclude:: matlab_codes/LA1D_m.m
   :language: matlab

For the explanaition of the code, please take a look at the youtube vidoes.

.. image:: images/LA1D_Matlab.png
   :width: 500px
   :height: 400px
   :alt: alternate text
   :align: center	


Julia Code
^^^^^^^^^^^ 
Here is a Julia code for modeling the 1D linear advection equation using upwind method described above. 

.. literalinclude:: julia_codes/LinearAdvection1D.jl
   :language: julia

For the explanaition of the code, please take a look at the youtube vidoes.

.. image:: images/LA1D_Julia.png
   :width: 500px
   :height: 400px
   :alt: alternate text
   :align: center	

   
Modified Equation
^^^^^^^^^^^^^^^^^ 

Modified equation first was introduced by Warming et al. which is a powerful tool of analysis the truncation error of time-dependent linear PDEs.
In particular, the effect of diffusion or dispersion of the error terms can be studied using modified equation. Considering equation :eq:`adv_1d_upwind`, the 
modified equation refers to the following formal equation:

.. math:: v(x,t+\Delta t) = \alpha_{max} v(x-\Delta x,t) + (1+\alpha_{min}-\alpha_{max}) v(x,t) - \alpha_{min} v(x+\Delta x,t)
   :label: modif-upwind
   
Assuming :math:`v` is :math:`C^{\infty}`, one can use taylor expansion of all terms in the above equation and deduce the folloing:

.. math:: v_{t} +\Delta t v_{tt} +O(\Delta t^2)= -(\gamma_{max}+\gamma_{min}) v_x + \frac{\Delta x}{2}(\gamma_{max}-\gamma_{min}) v_{xx} - \frac{\Delta^{2} x}{6}(\gamma_{max}+\gamma_{min}) v_{xxx} +O(\Delta x^3)
   :label: modif-upwind1

using :math:`\gamma_{max}+\gamma_{min}= c` and :math:`\gamma_{max}-\gamma_{min}= sign(c)c=|c|` we have:
   
.. math:: v_{t}+ c v_x  =-\Delta t v_{tt} + \Big(\frac{\Delta x}{2} |c|\Big)v_{xx} - \Big(\frac{\Delta^{2} x}{6}c\Big) v_{xxx} +O(\Delta^2 t,\Delta^3 x)
   :label: modif-upwind2   
   
taking the partial derivative of equation :eq:`modif-upwind2` with respect :math:`t` and :math:`x` we have:

   
.. math:: v_{tt}+ c v_{xt}  =-\Delta t v_{ttt} + \Big(\frac{\Delta x}{2} |c|\Big)v_{xxt} - \Big(\frac{\Delta^{2} x}{6}c\Big) v_{xxxt} +O(\Delta^2 t,\Delta^3 x)
   :label: modif-upwind3  
   
   
.. math:: v_{tx}+ c v_{xx}  =-\Delta t v_{ttx} + \Big(\frac{\Delta x}{2} |c|\Big)v_{xxx} - \Big(\frac{\Delta^{2} x}{6}c\Big) v_{xxxx} +O(\Delta^2 t,\Delta^3 x)
   :label: modif-upwind4     
   
If we multiply equation :eq:`modif-upwind4`  by :math:`-c` and sum it with equation :eq:`modif-upwind3` we get:

.. math:: v_{tt} =c^2 v_{xx}+\Delta t\Big(c v_{ttx} -t v_{ttt}\Big) + \Delta x \Big(\frac{|c|}{2} v_{xxt}  - c \frac{|c|}{2} v_{xxx} \Big) - \Delta^2 x \Big(\frac{c }{6} v_{xxxt} +\frac{c^{2} }{6}  v_{xxxx}\Big) +O(\Delta^2 t,\Delta^3 x)
   :label: modif-upwind5   
   
Substituting equation :eq:`modif-upwind5` to equation :eq:`modif-upwind2` we have:

.. math:: v_{t}+ c v_x  = \frac{c \Delta x}{2} \Big(Sign(c) - \frac{c \Delta t}{\Delta x}  \Big)v_{xx} +O(\Delta^2 t,\Delta^3 x)
   :label: modif-upwind-f   
   
Formally, :eq:`modif-upwind-f` is the PDE which actually solved by upwind method. As can be seen, the first term in the right hand side creates artificial diffusion for equation :eq:`adv_1d`
when solved numerically using upwind method. This shows that the upwind method creates numerical diffusion as wave propagates during time.
This equation also shows that the method is first order accurate. As we mentioned in equation :eq:`cfl_cond`, upwind method is stable if :math:`|\frac{c \Delta t}{\Delta x}| \le 1`. This means that 
the diffusion coefficient in equation :eq:`modif-upwind-f` :math:`\frac{c \Delta x}{2} \Big(Sign(c) - \frac{c \Delta t}{\Delta x}\Big)` is positive.


Error due to Diffusion and Dispersion 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Consider a periodic domain of :math:`[0,\pi]` for :eq:`adv_1d` and suppose that :math:`\Delta x= 2\pi /N`.
Since equation :eq:`adv_1d` is linear and defined in a periodic boundary condition and its corresponding discretization upwind method is also linear, 
any solution of equation is a finite combination of Fourier modes

.. math:: \psi_{j} = \frac{1}{N} \sum_{k=0}^{N-1} a_k e^{ikj\Delta x}
   :label: fourMod 
   

Now assume wave-like solution of    

.. math:: \psi(x,t) = \psi_0 e^{i(kx-\omega t)}
   :label: wave    

substituting equation :eq:`wave` to :eq:`adv_1d`, we get :math:`\omega (k)=ck` which corresponds to the relation between each wave frequency and its wavenumber :math:`k`. In general this relation is called dispersion.
if we use discretization of :math:`x_{j}=j\Delta x` and :math:`t_{n}=n\Delta t`, for :math:`(j,n=0,1,...)`, then the solution at  :math:`x_j` at time :math:`t_n` 
is :math:`u(x_j,t_n)`. We can see how the solution is amplified (or damped) by considering analytical amplificaiton factor:

.. math:: A_a =\frac{u(x_j,t_{n+1})}{u(x_j,t_{n})}=e^{-i\omega \Delta t}
   :label: A_a    
